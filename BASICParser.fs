// Implementation file for parser generated by fsyacc
module BASICParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "BASICParser.fsy"

open BASICAST

let mutable physicalNumber = ref 1

# 12 "BASICParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LABEL of (string)
  | IDENT of (int * string)
  | FN of (int * string)
  | NUMBER of (int * string)
  | PLUS of (int)
  | MINUS of (int)
  | TIMES of (int)
  | DIV of (int)
  | POW of (int)
  | EQU of (int)
  | LSS of (int)
  | LQU of (int)
  | GRT of (int)
  | GQU of (int)
  | NQU of (int)
  | LET of (int)
  | READ of (int)
  | DATA of (int)
  | PRINT of (int)
  | GOTO of (int)
  | IF of (int)
  | THEN of (int)
  | FOR of (int)
  | NEXT of (int)
  | END of (int)
  | STOP of (int)
  | DEF of (int)
  | GOSUB of (int)
  | RETURN of (int)
  | DIM of (int)
  | REM of (int)
  | SIN of (int)
  | COS of (int)
  | TAN of (int)
  | ATN of (int)
  | EXP of (int)
  | ABS of (int)
  | LOG of (int)
  | SQR of (int)
  | INT of (int)
  | RND of (int)
  | TO of (int)
  | STEP of (int)
  | LPAREN
  | RPAREN
  | EOF
  | COMMA
  | ENDLINE
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LABEL
    | TOKEN_IDENT
    | TOKEN_FN
    | TOKEN_NUMBER
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_EQU
    | TOKEN_LSS
    | TOKEN_LQU
    | TOKEN_GRT
    | TOKEN_GQU
    | TOKEN_NQU
    | TOKEN_LET
    | TOKEN_READ
    | TOKEN_DATA
    | TOKEN_PRINT
    | TOKEN_GOTO
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_FOR
    | TOKEN_NEXT
    | TOKEN_END
    | TOKEN_STOP
    | TOKEN_DEF
    | TOKEN_GOSUB
    | TOKEN_RETURN
    | TOKEN_DIM
    | TOKEN_REM
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_TAN
    | TOKEN_ATN
    | TOKEN_EXP
    | TOKEN_ABS
    | TOKEN_LOG
    | TOKEN_SQR
    | TOKEN_INT
    | TOKEN_RND
    | TOKEN_TO
    | TOKEN_STEP
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_ENDLINE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_endline
    | NONTERM_program
    | NONTERM_statement_list
    | NONTERM_statement
    | NONTERM_letB
    | NONTERM_read
    | NONTERM_ident_list
    | NONTERM_data
    | NONTERM_number_list
    | NONTERM_print
    | NONTERM_nodoP
    | NONTERM_empty
    | NONTERM_goto
    | NONTERM_ifB
    | NONTERM_relational
    | NONTERM_forB
    | NONTERM_unsubs
    | NONTERM_next
    | NONTERM_endB
    | NONTERM_stop
    | NONTERM_def
    | NONTERM_gosub
    | NONTERM_returnB
    | NONTERM_dim
    | NONTERM_dim_list
    | NONTERM_rem
    | NONTERM_ident
    | NONTERM_subs
    | NONTERM_math
    | NONTERM_expression
    | NONTERM_divtimesexpr
    | NONTERM_powexpr
    | NONTERM_simple_expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LABEL _ -> 0 
  | IDENT _ -> 1 
  | FN _ -> 2 
  | NUMBER _ -> 3 
  | PLUS _ -> 4 
  | MINUS _ -> 5 
  | TIMES _ -> 6 
  | DIV _ -> 7 
  | POW _ -> 8 
  | EQU _ -> 9 
  | LSS _ -> 10 
  | LQU _ -> 11 
  | GRT _ -> 12 
  | GQU _ -> 13 
  | NQU _ -> 14 
  | LET _ -> 15 
  | READ _ -> 16 
  | DATA _ -> 17 
  | PRINT _ -> 18 
  | GOTO _ -> 19 
  | IF _ -> 20 
  | THEN _ -> 21 
  | FOR _ -> 22 
  | NEXT _ -> 23 
  | END _ -> 24 
  | STOP _ -> 25 
  | DEF _ -> 26 
  | GOSUB _ -> 27 
  | RETURN _ -> 28 
  | DIM _ -> 29 
  | REM _ -> 30 
  | SIN _ -> 31 
  | COS _ -> 32 
  | TAN _ -> 33 
  | ATN _ -> 34 
  | EXP _ -> 35 
  | ABS _ -> 36 
  | LOG _ -> 37 
  | SQR _ -> 38 
  | INT _ -> 39 
  | RND _ -> 40 
  | TO _ -> 41 
  | STEP _ -> 42 
  | LPAREN  -> 43 
  | RPAREN  -> 44 
  | EOF  -> 45 
  | COMMA  -> 46 
  | ENDLINE  -> 47 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LABEL 
  | 1 -> TOKEN_IDENT 
  | 2 -> TOKEN_FN 
  | 3 -> TOKEN_NUMBER 
  | 4 -> TOKEN_PLUS 
  | 5 -> TOKEN_MINUS 
  | 6 -> TOKEN_TIMES 
  | 7 -> TOKEN_DIV 
  | 8 -> TOKEN_POW 
  | 9 -> TOKEN_EQU 
  | 10 -> TOKEN_LSS 
  | 11 -> TOKEN_LQU 
  | 12 -> TOKEN_GRT 
  | 13 -> TOKEN_GQU 
  | 14 -> TOKEN_NQU 
  | 15 -> TOKEN_LET 
  | 16 -> TOKEN_READ 
  | 17 -> TOKEN_DATA 
  | 18 -> TOKEN_PRINT 
  | 19 -> TOKEN_GOTO 
  | 20 -> TOKEN_IF 
  | 21 -> TOKEN_THEN 
  | 22 -> TOKEN_FOR 
  | 23 -> TOKEN_NEXT 
  | 24 -> TOKEN_END 
  | 25 -> TOKEN_STOP 
  | 26 -> TOKEN_DEF 
  | 27 -> TOKEN_GOSUB 
  | 28 -> TOKEN_RETURN 
  | 29 -> TOKEN_DIM 
  | 30 -> TOKEN_REM 
  | 31 -> TOKEN_SIN 
  | 32 -> TOKEN_COS 
  | 33 -> TOKEN_TAN 
  | 34 -> TOKEN_ATN 
  | 35 -> TOKEN_EXP 
  | 36 -> TOKEN_ABS 
  | 37 -> TOKEN_LOG 
  | 38 -> TOKEN_SQR 
  | 39 -> TOKEN_INT 
  | 40 -> TOKEN_RND 
  | 41 -> TOKEN_TO 
  | 42 -> TOKEN_STEP 
  | 43 -> TOKEN_LPAREN 
  | 44 -> TOKEN_RPAREN 
  | 45 -> TOKEN_EOF 
  | 46 -> TOKEN_COMMA 
  | 47 -> TOKEN_ENDLINE 
  | 50 -> TOKEN_end_of_input
  | 48 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_endline 
    | 3 -> NONTERM_endline 
    | 4 -> NONTERM_program 
    | 5 -> NONTERM_statement_list 
    | 6 -> NONTERM_statement_list 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statement 
    | 10 -> NONTERM_statement 
    | 11 -> NONTERM_statement 
    | 12 -> NONTERM_statement 
    | 13 -> NONTERM_statement 
    | 14 -> NONTERM_statement 
    | 15 -> NONTERM_statement 
    | 16 -> NONTERM_statement 
    | 17 -> NONTERM_statement 
    | 18 -> NONTERM_statement 
    | 19 -> NONTERM_statement 
    | 20 -> NONTERM_statement 
    | 21 -> NONTERM_statement 
    | 22 -> NONTERM_letB 
    | 23 -> NONTERM_read 
    | 24 -> NONTERM_ident_list 
    | 25 -> NONTERM_ident_list 
    | 26 -> NONTERM_data 
    | 27 -> NONTERM_number_list 
    | 28 -> NONTERM_number_list 
    | 29 -> NONTERM_print 
    | 30 -> NONTERM_nodoP 
    | 31 -> NONTERM_nodoP 
    | 32 -> NONTERM_nodoP 
    | 33 -> NONTERM_nodoP 
    | 34 -> NONTERM_nodoP 
    | 35 -> NONTERM_nodoP 
    | 36 -> NONTERM_nodoP 
    | 37 -> NONTERM_empty 
    | 38 -> NONTERM_goto 
    | 39 -> NONTERM_ifB 
    | 40 -> NONTERM_relational 
    | 41 -> NONTERM_relational 
    | 42 -> NONTERM_relational 
    | 43 -> NONTERM_relational 
    | 44 -> NONTERM_relational 
    | 45 -> NONTERM_relational 
    | 46 -> NONTERM_forB 
    | 47 -> NONTERM_forB 
    | 48 -> NONTERM_unsubs 
    | 49 -> NONTERM_next 
    | 50 -> NONTERM_endB 
    | 51 -> NONTERM_stop 
    | 52 -> NONTERM_def 
    | 53 -> NONTERM_gosub 
    | 54 -> NONTERM_returnB 
    | 55 -> NONTERM_dim 
    | 56 -> NONTERM_dim_list 
    | 57 -> NONTERM_dim_list 
    | 58 -> NONTERM_rem 
    | 59 -> NONTERM_ident 
    | 60 -> NONTERM_ident 
    | 61 -> NONTERM_ident 
    | 62 -> NONTERM_subs 
    | 63 -> NONTERM_subs 
    | 64 -> NONTERM_math 
    | 65 -> NONTERM_math 
    | 66 -> NONTERM_math 
    | 67 -> NONTERM_math 
    | 68 -> NONTERM_math 
    | 69 -> NONTERM_math 
    | 70 -> NONTERM_math 
    | 71 -> NONTERM_math 
    | 72 -> NONTERM_math 
    | 73 -> NONTERM_math 
    | 74 -> NONTERM_expression 
    | 75 -> NONTERM_expression 
    | 76 -> NONTERM_expression 
    | 77 -> NONTERM_divtimesexpr 
    | 78 -> NONTERM_divtimesexpr 
    | 79 -> NONTERM_divtimesexpr 
    | 80 -> NONTERM_powexpr 
    | 81 -> NONTERM_powexpr 
    | 82 -> NONTERM_powexpr 
    | 83 -> NONTERM_simple_expression 
    | 84 -> NONTERM_simple_expression 
    | 85 -> NONTERM_simple_expression 
    | 86 -> NONTERM_simple_expression 
    | 87 -> NONTERM_simple_expression 
    | 88 -> NONTERM_simple_expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 50 
let _fsyacc_tagOfErrorTerminal = 48

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LABEL _ -> "LABEL" 
  | IDENT _ -> "IDENT" 
  | FN _ -> "FN" 
  | NUMBER _ -> "NUMBER" 
  | PLUS _ -> "PLUS" 
  | MINUS _ -> "MINUS" 
  | TIMES _ -> "TIMES" 
  | DIV _ -> "DIV" 
  | POW _ -> "POW" 
  | EQU _ -> "EQU" 
  | LSS _ -> "LSS" 
  | LQU _ -> "LQU" 
  | GRT _ -> "GRT" 
  | GQU _ -> "GQU" 
  | NQU _ -> "NQU" 
  | LET _ -> "LET" 
  | READ _ -> "READ" 
  | DATA _ -> "DATA" 
  | PRINT _ -> "PRINT" 
  | GOTO _ -> "GOTO" 
  | IF _ -> "IF" 
  | THEN _ -> "THEN" 
  | FOR _ -> "FOR" 
  | NEXT _ -> "NEXT" 
  | END _ -> "END" 
  | STOP _ -> "STOP" 
  | DEF _ -> "DEF" 
  | GOSUB _ -> "GOSUB" 
  | RETURN _ -> "RETURN" 
  | DIM _ -> "DIM" 
  | REM _ -> "REM" 
  | SIN _ -> "SIN" 
  | COS _ -> "COS" 
  | TAN _ -> "TAN" 
  | ATN _ -> "ATN" 
  | EXP _ -> "EXP" 
  | ABS _ -> "ABS" 
  | LOG _ -> "LOG" 
  | SQR _ -> "SQR" 
  | INT _ -> "INT" 
  | RND _ -> "RND" 
  | TO _ -> "TO" 
  | STEP _ -> "STEP" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | ENDLINE  -> "ENDLINE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | POW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LSS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LQU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GRT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GQU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NQU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | READ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DATA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PRINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GOTO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | END _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STOP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GOSUB _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RETURN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ATN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ABS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LOG _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SQR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STEP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ENDLINE  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 6us; 7us; 8us; 2us; 65535us; 0us; 7us; 7us; 7us; 2us; 65535us; 0us; 9us; 7us; 9us; 2us; 65535us; 0us; 10us; 7us; 10us; 2us; 65535us; 30us; 31us; 34us; 35us; 2us; 65535us; 0us; 11us; 7us; 11us; 2us; 65535us; 36us; 37us; 40us; 41us; 2us; 65535us; 0us; 12us; 7us; 12us; 4us; 65535us; 42us; 43us; 46us; 49us; 47us; 50us; 48us; 51us; 4us; 65535us; 42us; 45us; 46us; 45us; 47us; 45us; 48us; 45us; 2us; 65535us; 0us; 13us; 7us; 13us; 2us; 65535us; 0us; 14us; 7us; 14us; 1us; 65535us; 56us; 57us; 2us; 65535us; 0us; 15us; 7us; 15us; 4us; 65535us; 68us; 69us; 80us; 81us; 89us; 90us; 182us; 184us; 2us; 65535us; 0us; 16us; 7us; 16us; 2us; 65535us; 0us; 17us; 7us; 17us; 2us; 65535us; 0us; 18us; 7us; 18us; 2us; 65535us; 0us; 19us; 7us; 19us; 2us; 65535us; 0us; 20us; 7us; 20us; 2us; 65535us; 0us; 21us; 7us; 21us; 2us; 65535us; 0us; 22us; 7us; 22us; 2us; 65535us; 100us; 101us; 104us; 105us; 2us; 65535us; 0us; 23us; 7us; 23us; 32us; 65535us; 25us; 26us; 27us; 176us; 30us; 33us; 34us; 33us; 42us; 176us; 46us; 176us; 47us; 176us; 48us; 176us; 55us; 176us; 57us; 176us; 70us; 176us; 72us; 176us; 75us; 176us; 92us; 176us; 109us; 176us; 112us; 176us; 123us; 176us; 127us; 176us; 131us; 176us; 135us; 176us; 139us; 176us; 143us; 176us; 147us; 176us; 151us; 176us; 155us; 176us; 159us; 176us; 164us; 176us; 166us; 176us; 169us; 176us; 171us; 176us; 182us; 176us; 187us; 176us; 2us; 65535us; 100us; 103us; 104us; 103us; 30us; 65535us; 27us; 180us; 42us; 180us; 46us; 180us; 47us; 180us; 48us; 180us; 55us; 180us; 57us; 180us; 70us; 180us; 72us; 180us; 75us; 180us; 92us; 180us; 109us; 180us; 112us; 180us; 123us; 180us; 127us; 180us; 131us; 180us; 135us; 180us; 139us; 180us; 143us; 180us; 147us; 180us; 151us; 180us; 155us; 180us; 159us; 180us; 164us; 180us; 166us; 180us; 169us; 180us; 171us; 180us; 174us; 180us; 182us; 180us; 187us; 180us; 25us; 65535us; 27us; 28us; 42us; 47us; 46us; 47us; 47us; 47us; 48us; 47us; 55us; 56us; 57us; 58us; 70us; 71us; 72us; 73us; 75us; 76us; 92us; 93us; 109us; 110us; 112us; 113us; 123us; 124us; 127us; 128us; 131us; 132us; 135us; 136us; 139us; 140us; 143us; 144us; 147us; 148us; 151us; 152us; 155us; 156us; 159us; 160us; 182us; 162us; 187us; 163us; 27us; 65535us; 27us; 168us; 42us; 168us; 46us; 168us; 47us; 168us; 48us; 168us; 55us; 168us; 57us; 168us; 70us; 168us; 72us; 168us; 75us; 168us; 92us; 168us; 109us; 168us; 112us; 168us; 123us; 168us; 127us; 168us; 131us; 168us; 135us; 168us; 139us; 168us; 143us; 168us; 147us; 168us; 151us; 168us; 155us; 168us; 159us; 168us; 164us; 165us; 166us; 167us; 182us; 168us; 187us; 168us; 29us; 65535us; 27us; 173us; 42us; 173us; 46us; 173us; 47us; 173us; 48us; 173us; 55us; 173us; 57us; 173us; 70us; 173us; 72us; 173us; 75us; 173us; 92us; 173us; 109us; 173us; 112us; 173us; 123us; 173us; 127us; 173us; 131us; 173us; 135us; 173us; 139us; 173us; 143us; 173us; 147us; 173us; 151us; 173us; 155us; 173us; 159us; 173us; 164us; 173us; 166us; 173us; 169us; 170us; 171us; 172us; 182us; 173us; 187us; 173us; 30us; 65535us; 27us; 177us; 42us; 177us; 46us; 177us; 47us; 177us; 48us; 177us; 55us; 177us; 57us; 177us; 70us; 177us; 72us; 177us; 75us; 177us; 92us; 177us; 109us; 177us; 112us; 177us; 123us; 177us; 127us; 177us; 131us; 177us; 135us; 177us; 139us; 177us; 143us; 177us; 147us; 177us; 151us; 177us; 155us; 177us; 159us; 177us; 164us; 177us; 166us; 177us; 169us; 177us; 171us; 177us; 174us; 175us; 182us; 177us; 187us; 177us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 13us; 16us; 19us; 22us; 25us; 28us; 31us; 36us; 41us; 44us; 47us; 49us; 52us; 57us; 60us; 63us; 66us; 69us; 72us; 75us; 78us; 81us; 84us; 117us; 120us; 151us; 177us; 205us; 235us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 4us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 16us; 22us; 23us; 26us; 29us; 38us; 39us; 46us; 47us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 1us; 22us; 1us; 22us; 1us; 22us; 3us; 22us; 74us; 75us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 2us; 31us; 34us; 4us; 32us; 35us; 74us; 75us; 2us; 33us; 36us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 3us; 39us; 74us; 75us; 1us; 39us; 3us; 39us; 74us; 75us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 2us; 46us; 47us; 2us; 46us; 47us; 2us; 46us; 47us; 4us; 46us; 47us; 74us; 75us; 2us; 46us; 47us; 4us; 46us; 47us; 74us; 75us; 1us; 46us; 1us; 47us; 3us; 47us; 74us; 75us; 1us; 47us; 1us; 48us; 4us; 48us; 59us; 60us; 61us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 3us; 52us; 74us; 75us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 2us; 56us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 3us; 59us; 60us; 61us; 2us; 60us; 61us; 4us; 60us; 61us; 74us; 75us; 1us; 60us; 1us; 61us; 3us; 61us; 74us; 75us; 1us; 61us; 2us; 62us; 63us; 2us; 62us; 63us; 2us; 62us; 63us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 3us; 64us; 74us; 75us; 1us; 64us; 1us; 65us; 1us; 65us; 3us; 65us; 74us; 75us; 1us; 65us; 1us; 66us; 1us; 66us; 3us; 66us; 74us; 75us; 1us; 66us; 1us; 67us; 1us; 67us; 3us; 67us; 74us; 75us; 1us; 67us; 1us; 68us; 1us; 68us; 3us; 68us; 74us; 75us; 1us; 68us; 1us; 69us; 1us; 69us; 3us; 69us; 74us; 75us; 1us; 69us; 1us; 70us; 1us; 70us; 3us; 70us; 74us; 75us; 1us; 70us; 1us; 71us; 1us; 71us; 3us; 71us; 74us; 75us; 1us; 71us; 1us; 72us; 1us; 72us; 3us; 72us; 74us; 75us; 1us; 72us; 1us; 73us; 1us; 73us; 3us; 73us; 74us; 75us; 1us; 73us; 3us; 74us; 75us; 87us; 3us; 74us; 75us; 88us; 1us; 74us; 3us; 74us; 77us; 78us; 1us; 75us; 3us; 75us; 77us; 78us; 3us; 76us; 77us; 78us; 1us; 77us; 2us; 77us; 80us; 1us; 78us; 2us; 78us; 80us; 2us; 79us; 80us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 2us; 83us; 85us; 1us; 84us; 3us; 85us; 86us; 87us; 3us; 85us; 86us; 87us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 88us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 65us; 67us; 69us; 71us; 75us; 77us; 79us; 81us; 83us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 114us; 119us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 140us; 142us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 167us; 170us; 173us; 178us; 181us; 186us; 188us; 190us; 194us; 196us; 198us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 254us; 256us; 258us; 260us; 262us; 266us; 269us; 274us; 276us; 278us; 282us; 284us; 287us; 290us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 309us; 311us; 313us; 315us; 319us; 321us; 323us; 325us; 329us; 331us; 333us; 335us; 339us; 341us; 343us; 345us; 349us; 351us; 353us; 355us; 359us; 361us; 363us; 365us; 369us; 371us; 373us; 375us; 379us; 381us; 383us; 385us; 389us; 391us; 393us; 395us; 399us; 401us; 405us; 409us; 411us; 415us; 417us; 421us; 425us; 427us; 430us; 432us; 435us; 438us; 440us; 442us; 444us; 446us; 448us; 451us; 453us; 457us; 461us; 463us; 465us; 467us; 469us; 471us; |]
let _fsyacc_action_rows = 189
let _fsyacc_actionTableElements = [|1us; 16389us; 3us; 24us; 0us; 49152us; 1us; 16386us; 47us; 5us; 1us; 32768us; 45us; 4us; 0us; 16385us; 0us; 16387us; 0us; 16388us; 1us; 16389us; 3us; 24us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 15us; 32768us; 15us; 25us; 16us; 30us; 17us; 36us; 18us; 42us; 19us; 52us; 20us; 55us; 22us; 68us; 23us; 80us; 24us; 83us; 25us; 85us; 26us; 87us; 27us; 95us; 28us; 98us; 29us; 100us; 30us; 106us; 1us; 32768us; 1us; 108us; 1us; 32768us; 9us; 27us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 47us; 29us; 0us; 16406us; 1us; 32768us; 1us; 108us; 1us; 32768us; 47us; 32us; 0us; 16407us; 1us; 16408us; 46us; 34us; 1us; 32768us; 1us; 108us; 0us; 16409us; 1us; 32768us; 3us; 39us; 1us; 32768us; 47us; 38us; 0us; 16410us; 1us; 16411us; 46us; 40us; 1us; 32768us; 3us; 39us; 0us; 16412us; 16us; 16421us; 0us; 46us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 46us; 48us; 1us; 32768us; 47us; 44us; 0us; 16413us; 0us; 16414us; 16us; 16415us; 0us; 46us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 46us; 48us; 18us; 16416us; 0us; 46us; 1us; 108us; 2us; 181us; 3us; 178us; 4us; 164us; 5us; 166us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 46us; 48us; 16us; 16417us; 0us; 46us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 46us; 48us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 1us; 32768us; 3us; 53us; 1us; 32768us; 47us; 54us; 0us; 16422us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 8us; 32768us; 4us; 164us; 5us; 166us; 9us; 62us; 10us; 63us; 11us; 65us; 12us; 64us; 13us; 66us; 14us; 67us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 21us; 59us; 1us; 32768us; 3us; 60us; 1us; 32768us; 47us; 61us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 1us; 32768us; 1us; 78us; 1us; 32768us; 9us; 70us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 41us; 72us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 4us; 32768us; 4us; 164us; 5us; 166us; 42us; 75us; 47us; 74us; 0us; 16430us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 47us; 77us; 0us; 16431us; 0us; 16432us; 6us; 16432us; 4us; 16443us; 5us; 16443us; 6us; 16443us; 7us; 16443us; 8us; 16443us; 43us; 109us; 1us; 32768us; 1us; 78us; 1us; 32768us; 47us; 82us; 0us; 16433us; 1us; 32768us; 47us; 84us; 0us; 16434us; 1us; 32768us; 47us; 86us; 0us; 16435us; 1us; 32768us; 2us; 88us; 1us; 32768us; 43us; 89us; 1us; 32768us; 1us; 78us; 1us; 32768us; 44us; 91us; 1us; 32768us; 9us; 92us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 47us; 94us; 0us; 16436us; 1us; 32768us; 3us; 96us; 1us; 32768us; 47us; 97us; 0us; 16437us; 1us; 32768us; 47us; 99us; 0us; 16438us; 1us; 32768us; 1us; 115us; 1us; 32768us; 47us; 102us; 0us; 16439us; 1us; 16440us; 46us; 104us; 1us; 32768us; 1us; 115us; 0us; 16441us; 1us; 32768us; 47us; 107us; 0us; 16442us; 1us; 16443us; 43us; 109us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 4us; 32768us; 4us; 164us; 5us; 166us; 44us; 111us; 46us; 112us; 0us; 16444us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 114us; 0us; 16445us; 1us; 32768us; 43us; 116us; 1us; 32768us; 3us; 117us; 2us; 32768us; 44us; 118us; 46us; 119us; 0us; 16446us; 1us; 32768us; 3us; 120us; 1us; 32768us; 44us; 121us; 0us; 16447us; 1us; 32768us; 43us; 123us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 125us; 0us; 16448us; 1us; 32768us; 43us; 127us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 129us; 0us; 16449us; 1us; 32768us; 43us; 131us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 133us; 0us; 16450us; 1us; 32768us; 43us; 135us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 137us; 0us; 16451us; 1us; 32768us; 43us; 139us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 141us; 0us; 16452us; 1us; 32768us; 43us; 143us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 145us; 0us; 16453us; 1us; 32768us; 43us; 147us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 149us; 0us; 16454us; 1us; 32768us; 43us; 151us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 153us; 0us; 16455us; 1us; 32768us; 43us; 155us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 157us; 0us; 16456us; 1us; 32768us; 43us; 159us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 161us; 0us; 16457us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 186us; 3us; 32768us; 4us; 164us; 5us; 166us; 44us; 188us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 2us; 16458us; 6us; 171us; 7us; 169us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 2us; 16459us; 6us; 171us; 7us; 169us; 2us; 16460us; 6us; 171us; 7us; 169us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 1us; 16461us; 8us; 174us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 1us; 16462us; 8us; 174us; 1us; 16463us; 8us; 174us; 13us; 32768us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 1us; 16467us; 44us; 183us; 0us; 16468us; 1us; 32768us; 43us; 182us; 14us; 32768us; 1us; 79us; 2us; 181us; 3us; 179us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 0us; 16469us; 1us; 32768us; 44us; 185us; 0us; 16470us; 0us; 16471us; 14us; 32768us; 1us; 108us; 2us; 181us; 3us; 178us; 31us; 122us; 32us; 126us; 33us; 130us; 34us; 134us; 35us; 138us; 36us; 142us; 37us; 146us; 38us; 150us; 39us; 154us; 40us; 158us; 43us; 187us; 0us; 16472us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 8us; 9us; 10us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 44us; 46us; 48us; 63us; 67us; 68us; 70us; 72us; 73us; 75us; 77us; 78us; 80us; 82us; 83us; 85us; 87us; 88us; 105us; 107us; 108us; 109us; 126us; 145us; 162us; 163us; 164us; 165us; 167us; 169us; 170us; 185us; 194us; 209us; 213us; 215us; 217us; 218us; 219us; 220us; 221us; 222us; 223us; 224us; 226us; 228us; 243us; 247us; 262us; 267us; 268us; 283us; 287us; 288us; 289us; 296us; 298us; 300us; 301us; 303us; 304us; 306us; 307us; 309us; 311us; 313us; 315us; 317us; 332us; 336us; 337us; 339us; 341us; 342us; 344us; 345us; 347us; 349us; 350us; 352us; 354us; 355us; 357us; 358us; 360us; 375us; 380us; 381us; 396us; 400us; 401us; 403us; 405us; 408us; 409us; 411us; 413us; 414us; 416us; 431us; 435us; 436us; 438us; 453us; 457us; 458us; 460us; 475us; 479us; 480us; 482us; 497us; 501us; 502us; 504us; 519us; 523us; 524us; 526us; 541us; 545us; 546us; 548us; 563us; 567us; 568us; 570us; 585us; 589us; 590us; 592us; 607us; 611us; 612us; 614us; 629us; 633us; 634us; 638us; 642us; 657us; 660us; 675us; 678us; 681us; 696us; 698us; 713us; 715us; 717us; 731us; 732us; 733us; 734us; 735us; 737us; 738us; 740us; 755us; 756us; 758us; 759us; 760us; 775us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 0us; 1us; 1us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 6us; 4us; 1us; 3us; 4us; 1us; 3us; 4us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 0us; 4us; 8us; 1us; 1us; 1us; 1us; 1us; 1us; 8us; 10us; 1us; 4us; 3us; 3us; 9us; 4us; 3us; 4us; 1us; 3us; 3us; 1us; 4us; 6us; 4us; 6us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 1us; 4us; 4us; 4us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 10us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 14us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 28us; 28us; 29us; 29us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 31us; 31us; 31us; 32us; 32us; 32us; 33us; 33us; 33us; 34us; 34us; 34us; 34us; 34us; 34us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16387us; 16388us; 65535us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 16414us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 16431us; 16432us; 65535us; 65535us; 65535us; 16433us; 65535us; 16434us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 16437us; 65535us; 16438us; 65535us; 65535us; 16439us; 65535us; 65535us; 16441us; 65535us; 16442us; 65535us; 65535us; 65535us; 16444us; 65535us; 65535us; 16445us; 65535us; 65535us; 65535us; 16446us; 65535us; 65535us; 16447us; 65535us; 65535us; 65535us; 16448us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16452us; 65535us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 16454us; 65535us; 65535us; 65535us; 16455us; 65535us; 65535us; 65535us; 16456us; 65535us; 65535us; 65535us; 16457us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16464us; 16465us; 16466us; 16467us; 65535us; 16468us; 65535us; 65535us; 16469us; 65535us; 16470us; 16471us; 65535us; 16472us; |]
let _fsyacc_reductions ()  =    [| 
# 471 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 480 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'endline)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "BASICParser.fsy"
                                               _1 
                   )
# 25 "BASICParser.fsy"
                 : Prog));
# 492 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "BASICParser.fsy"
                         
                   )
# 28 "BASICParser.fsy"
                 : 'endline));
# 502 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "BASICParser.fsy"
                                   
                   )
# 29 "BASICParser.fsy"
                 : 'endline));
# 512 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "BASICParser.fsy"
                                          Program (_1) 
                   )
# 32 "BASICParser.fsy"
                 : 'program));
# 523 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "BASICParser.fsy"
                             [] 
                   )
# 35 "BASICParser.fsy"
                 : 'statement_list));
# 533 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "BASICParser.fsy"
                                                      _1::_2 
                   )
# 36 "BASICParser.fsy"
                 : 'statement_list));
# 545 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'letB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "BASICParser.fsy"
                                        _1 
                   )
# 39 "BASICParser.fsy"
                 : 'statement));
# 556 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'read)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "BASICParser.fsy"
                                       _1 
                   )
# 40 "BASICParser.fsy"
                 : 'statement));
# 567 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "BASICParser.fsy"
                                       _1 
                   )
# 41 "BASICParser.fsy"
                 : 'statement));
# 578 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'print)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "BASICParser.fsy"
                                       _1 
                   )
# 42 "BASICParser.fsy"
                 : 'statement));
# 589 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'goto)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "BASICParser.fsy"
                                       _1 
                   )
# 43 "BASICParser.fsy"
                 : 'statement));
# 600 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "BASICParser.fsy"
                                        _1 
                   )
# 44 "BASICParser.fsy"
                 : 'statement));
# 611 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'forB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "BASICParser.fsy"
                                        _1 
                   )
# 45 "BASICParser.fsy"
                 : 'statement));
# 622 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'next)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "BASICParser.fsy"
                                       _1 
                   )
# 46 "BASICParser.fsy"
                 : 'statement));
# 633 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'endB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "BASICParser.fsy"
                                        _1 
                   )
# 47 "BASICParser.fsy"
                 : 'statement));
# 644 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "BASICParser.fsy"
                                       _1 
                   )
# 48 "BASICParser.fsy"
                 : 'statement));
# 655 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "BASICParser.fsy"
                                       _1 
                   )
# 49 "BASICParser.fsy"
                 : 'statement));
# 666 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'gosub)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "BASICParser.fsy"
                                       _1 
                   )
# 50 "BASICParser.fsy"
                 : 'statement));
# 677 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'returnB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "BASICParser.fsy"
                                        _1 
                   )
# 51 "BASICParser.fsy"
                 : 'statement));
# 688 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "BASICParser.fsy"
                                       _1 
                   )
# 52 "BASICParser.fsy"
                 : 'statement));
# 699 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "BASICParser.fsy"
                                       _1 
                   )
# 53 "BASICParser.fsy"
                 : 'statement));
# 710 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "BASICParser.fsy"
                                                                  let physical, number = _1
                                                           Let (physical, number, _3, _5) 
                   )
# 57 "BASICParser.fsy"
                 : 'letB));
# 726 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "BASICParser.fsy"
                                                          let physical, number = _1
                                                   Read (physical, number, _3) 
                   )
# 61 "BASICParser.fsy"
                 : 'read));
# 740 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "BASICParser.fsy"
                                               [_1] 
                   )
# 65 "BASICParser.fsy"
                 : 'ident_list));
# 751 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "BASICParser.fsy"
                                                    _1::_3 
                   )
# 66 "BASICParser.fsy"
                 : 'ident_list));
# 763 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'number_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "BASICParser.fsy"
                                                         
                                              let physical, n = _1
                                              Data (physical, n, _3)
                                            
                   )
# 70 "BASICParser.fsy"
                 : 'data));
# 779 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "BASICParser.fsy"
                                               
                                                 let line, n = _1
                                                 [n]
                                              
                   )
# 76 "BASICParser.fsy"
                 : 'number_list));
# 793 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'number_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "BASICParser.fsy"
                                                     
                                                let line, n = _1
                                                n::_3
                   )
# 80 "BASICParser.fsy"
                 : 'number_list));
# 807 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nodoP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "BASICParser.fsy"
                                                     let physical, number = _1
                                                     Print(physical, number, _3)
                   )
# 85 "BASICParser.fsy"
                 : 'print));
# 821 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'empty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "BASICParser.fsy"
                                               _1
                   )
# 89 "BASICParser.fsy"
                 : 'nodoP));
# 832 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "BASICParser.fsy"
                                               [PStr(_1)]
                   )
# 90 "BASICParser.fsy"
                 : 'nodoP));
# 843 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "BASICParser.fsy"
                                             [PExpr(_1)]
                   )
# 91 "BASICParser.fsy"
                 : 'nodoP));
# 854 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "BASICParser.fsy"
                                             [PComma]
                   )
# 92 "BASICParser.fsy"
                 : 'nodoP));
# 864 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nodoP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "BASICParser.fsy"
                                             PStr(_1)::_2
                   )
# 93 "BASICParser.fsy"
                 : 'nodoP));
# 876 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nodoP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "BASICParser.fsy"
                                             PExpr(_1)::_2
                   )
# 94 "BASICParser.fsy"
                 : 'nodoP));
# 888 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nodoP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "BASICParser.fsy"
                                            PComma::_2
                   )
# 95 "BASICParser.fsy"
                 : 'nodoP));
# 899 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "BASICParser.fsy"
                          [PEmpty]
                   )
# 98 "BASICParser.fsy"
                 : 'empty));
# 909 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "BASICParser.fsy"
                                                    
                                              let physical, number = _1
                                              let line, n = _3
                                              Goto (physical, number, n)
                                             
                   )
# 100 "BASICParser.fsy"
                 : 'goto));
# 926 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'relational)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "BASICParser.fsy"
                                                                                         
                                                                                  let physical, number = _1
                                                                                  let line, n = _7
                                                                                  If (physical, number, _3, _4, _5, n)
                                                                                
                   )
# 107 "BASICParser.fsy"
                 : 'ifB));
# 947 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "BASICParser.fsy"
                              "="
                   )
# 113 "BASICParser.fsy"
                 : 'relational));
# 958 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "BASICParser.fsy"
                                "<"
                   )
# 114 "BASICParser.fsy"
                 : 'relational));
# 969 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "BASICParser.fsy"
                                ">"
                   )
# 115 "BASICParser.fsy"
                 : 'relational));
# 980 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "BASICParser.fsy"
                                "<="
                   )
# 116 "BASICParser.fsy"
                 : 'relational));
# 991 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "BASICParser.fsy"
                                ">="
                   )
# 117 "BASICParser.fsy"
                 : 'relational));
# 1002 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "BASICParser.fsy"
                                "<>"
                   )
# 118 "BASICParser.fsy"
                 : 'relational));
# 1013 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unsubs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "BASICParser.fsy"
                                                                                 
                                                                  let physical, number = _1
                                                                  For (physical, number, _3, _5, _7, None)
                                                                        
                   )
# 121 "BASICParser.fsy"
                 : 'forB));
# 1033 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unsubs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "BASICParser.fsy"
                                                                                                
                                                                             let physical, number = _1
                                                                     For (physical, number, _3, _5,_7, Some(_9))
                                                                                       
                   )
# 125 "BASICParser.fsy"
                 : 'forB));
# 1055 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "BASICParser.fsy"
                                  Variable(_1) 
                   )
# 131 "BASICParser.fsy"
                 : 'unsubs));
# 1066 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unsubs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "BASICParser.fsy"
                                                    
                                             let physical, number = _1
                                             Next (physical, number, _3)
                                           
                   )
# 134 "BASICParser.fsy"
                 : 'next));
# 1082 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "BASICParser.fsy"
                                              let physical, number = _1
                                      End (physical, number) 
                   )
# 140 "BASICParser.fsy"
                 : 'endB));
# 1095 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "BASICParser.fsy"
                                             
                                       let physical, number = _1
                                       Stop (physical, number)
                                     
                   )
# 144 "BASICParser.fsy"
                 : 'stop));
# 1110 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'unsubs)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "BASICParser.fsy"
                                                                                   
                                                                     let physical, number = _1
                                                                     let line, letter = _3
                                                                     Def (physical, number, letter, _5, _8)
                                                                   
                   )
# 150 "BASICParser.fsy"
                 : 'def));
# 1130 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "BASICParser.fsy"
                                                     
                                               let physical, number = _1
                                               let line, n = _3
                                               Gosub (physical, number, n)
                                             
                   )
# 156 "BASICParser.fsy"
                 : 'gosub));
# 1147 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "BASICParser.fsy"
                                               
                                         let physical, number = _1
                                         Return (physical, number)
                                       
                   )
# 163 "BASICParser.fsy"
                 : 'returnB));
# 1162 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dim_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "BASICParser.fsy"
                                                      let physical, n = _1
                                                      Dim (physical, n,_3)
                                                      
                   )
# 169 "BASICParser.fsy"
                 : 'dim));
# 1177 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "BASICParser.fsy"
                                              [_1] 
                   )
# 174 "BASICParser.fsy"
                 : 'dim_list));
# 1188 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dim_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "BASICParser.fsy"
                                                 _1::_3 
                   )
# 175 "BASICParser.fsy"
                 : 'dim_list));
# 1200 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "BASICParser.fsy"
                                            
                                      let physical, number = _1
                                      Rem (physical,number)
                                   
                   )
# 180 "BASICParser.fsy"
                 : 'rem));
# 1215 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "BASICParser.fsy"
                                  Variable(_1) 
                   )
# 186 "BASICParser.fsy"
                 : 'ident));
# 1226 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "BASICParser.fsy"
                                                            
                                                            let physical, id = _1
                                                            List(physical, id, _3)
                                                          
                   )
# 187 "BASICParser.fsy"
                 : 'ident));
# 1241 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "BASICParser.fsy"
                                                                             
                                                                               let physical, id = _1
                                                                               Table(physical, id, _3, _5)
                                                                           
                   )
# 191 "BASICParser.fsy"
                 : 'ident));
# 1257 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "BASICParser.fsy"
                                                      let physical, id = _1
                                                      let line, n = _3
                                                      ListDim(id, n)
                                                    
                   )
# 196 "BASICParser.fsy"
                 : 'subs));
# 1272 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "BASICParser.fsy"
                                                                     let physical, id = _1
                                                                     let line, n = _3
                                                                     let line2, n2 = _5
                                                                     TableDim(id, n, n2)
                                                                   
                   )
# 200 "BASICParser.fsy"
                 : 'subs));
# 1289 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "BASICParser.fsy"
                                                            Math("Sin", _3) 
                   )
# 207 "BASICParser.fsy"
                 : 'math));
# 1301 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "BASICParser.fsy"
                                                            Math("Cos", _3) 
                   )
# 208 "BASICParser.fsy"
                 : 'math));
# 1313 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "BASICParser.fsy"
                                                            Math("Tan", _3) 
                   )
# 209 "BASICParser.fsy"
                 : 'math));
# 1325 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "BASICParser.fsy"
                                                            Math("Atn", _3) 
                   )
# 210 "BASICParser.fsy"
                 : 'math));
# 1337 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "BASICParser.fsy"
                                                            Math("Exp", _3) 
                   )
# 211 "BASICParser.fsy"
                 : 'math));
# 1349 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "BASICParser.fsy"
                                                            Math("Abs", _3) 
                   )
# 212 "BASICParser.fsy"
                 : 'math));
# 1361 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "BASICParser.fsy"
                                                            Math("Log", _3) 
                   )
# 213 "BASICParser.fsy"
                 : 'math));
# 1373 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "BASICParser.fsy"
                                                            Math("Sqr", _3) 
                   )
# 214 "BASICParser.fsy"
                 : 'math));
# 1385 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "BASICParser.fsy"
                                                            Math("Int", _3) 
                   )
# 215 "BASICParser.fsy"
                 : 'math));
# 1397 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "BASICParser.fsy"
                                                            Math("Rnd", _3) 
                   )
# 216 "BASICParser.fsy"
                 : 'math));
# 1409 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'divtimesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "BASICParser.fsy"
                                                             Plus (_2, _1, _3) 
                   )
# 219 "BASICParser.fsy"
                 : 'expression));
# 1422 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'divtimesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "BASICParser.fsy"
                                                             Minus (_2, _1, _3) 
                   )
# 220 "BASICParser.fsy"
                 : 'expression));
# 1435 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'divtimesexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "BASICParser.fsy"
                                                          _1
                   )
# 221 "BASICParser.fsy"
                 : 'expression));
# 1446 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'divtimesexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'powexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "BASICParser.fsy"
                                                          Div (_2, _1, _3) 
                   )
# 224 "BASICParser.fsy"
                 : 'divtimesexpr));
# 1459 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'divtimesexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'powexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "BASICParser.fsy"
                                                          Times (_2, _1, _3) 
                   )
# 225 "BASICParser.fsy"
                 : 'divtimesexpr));
# 1472 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'powexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "BASICParser.fsy"
                                                          _1
                   )
# 226 "BASICParser.fsy"
                 : 'divtimesexpr));
# 1483 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'powexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "BASICParser.fsy"
                                                               Pow (_2, _1, _3) 
                   )
# 229 "BASICParser.fsy"
                 : 'powexpr));
# 1496 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "BASICParser.fsy"
                                                          _1
                   )
# 230 "BASICParser.fsy"
                 : 'powexpr));
# 1507 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "BASICParser.fsy"
                                                          _1
                   )
# 231 "BASICParser.fsy"
                 : 'powexpr));
# 1518 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "BASICParser.fsy"
                                 
                                    let physical, n = _1
                                    Number(physical,n)
                                  
                   )
# 234 "BASICParser.fsy"
                 : 'simple_expression));
# 1532 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'math)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "BASICParser.fsy"
                                  _1 
                   )
# 238 "BASICParser.fsy"
                 : 'simple_expression));
# 1543 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "BASICParser.fsy"
                                                     let line, name = _1
                                                     let line, n = _3
                                                     Fn(name,None, Some(n)) 
                   )
# 239 "BASICParser.fsy"
                 : 'simple_expression));
# 1557 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unsubs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "BASICParser.fsy"
                                                     let line, name = _1
                                                     Fn(name,Some(_3), None) 
                   )
# 242 "BASICParser.fsy"
                 : 'simple_expression));
# 1570 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "BASICParser.fsy"
                                                         let line, name = _1
                                                         Fn(name,Some(_3), None)
                   )
# 244 "BASICParser.fsy"
                 : 'simple_expression));
# 1583 "BASICParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "BASICParser.fsy"
                                                     _2
                   )
# 246 "BASICParser.fsy"
                 : 'simple_expression));
|]
# 1595 "BASICParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 51;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
