// Signature file for parser generated by fsyacc
module BASICParser
type token = 
  | LABEL of (string)
  | IDENT of (int * string)
  | FN of (int * string)
  | NUMBER of (int * string)
  | PLUS of (int)
  | MINUS of (int)
  | TIMES of (int)
  | DIV of (int)
  | POW of (int)
  | EQU of (int)
  | LSS of (int)
  | LQU of (int)
  | GRT of (int)
  | GQU of (int)
  | NQU of (int)
  | LET of (int)
  | READ of (int)
  | DATA of (int)
  | PRINT of (int)
  | GOTO of (int)
  | IF of (int)
  | THEN of (int)
  | FOR of (int)
  | NEXT of (int)
  | END of (int)
  | STOP of (int)
  | DEF of (int)
  | GOSUB of (int)
  | RETURN of (int)
  | DIM of (int)
  | REM of (int)
  | SIN of (int)
  | COS of (int)
  | TAN of (int)
  | ATN of (int)
  | EXP of (int)
  | ABS of (int)
  | LOG of (int)
  | SQR of (int)
  | INT of (int)
  | RND of (int)
  | TO of (int)
  | STEP of (int)
  | LPAREN
  | RPAREN
  | EOF
  | COMMA
  | ENDLINE
type tokenId = 
    | TOKEN_LABEL
    | TOKEN_IDENT
    | TOKEN_FN
    | TOKEN_NUMBER
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_EQU
    | TOKEN_LSS
    | TOKEN_LQU
    | TOKEN_GRT
    | TOKEN_GQU
    | TOKEN_NQU
    | TOKEN_LET
    | TOKEN_READ
    | TOKEN_DATA
    | TOKEN_PRINT
    | TOKEN_GOTO
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_FOR
    | TOKEN_NEXT
    | TOKEN_END
    | TOKEN_STOP
    | TOKEN_DEF
    | TOKEN_GOSUB
    | TOKEN_RETURN
    | TOKEN_DIM
    | TOKEN_REM
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_TAN
    | TOKEN_ATN
    | TOKEN_EXP
    | TOKEN_ABS
    | TOKEN_LOG
    | TOKEN_SQR
    | TOKEN_INT
    | TOKEN_RND
    | TOKEN_TO
    | TOKEN_STEP
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_ENDLINE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_endline
    | NONTERM_program
    | NONTERM_statement_list
    | NONTERM_statement
    | NONTERM_letB
    | NONTERM_read
    | NONTERM_ident_list
    | NONTERM_data
    | NONTERM_number_list
    | NONTERM_print
    | NONTERM_nodoP
    | NONTERM_empty
    | NONTERM_goto
    | NONTERM_ifB
    | NONTERM_relational
    | NONTERM_forB
    | NONTERM_unsubs
    | NONTERM_next
    | NONTERM_endB
    | NONTERM_stop
    | NONTERM_def
    | NONTERM_gosub
    | NONTERM_returnB
    | NONTERM_dim
    | NONTERM_dim_list
    | NONTERM_rem
    | NONTERM_ident
    | NONTERM_subs
    | NONTERM_math
    | NONTERM_expression
    | NONTERM_divtimesexpr
    | NONTERM_powexpr
    | NONTERM_simple_expression
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Prog) 
